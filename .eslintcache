[{"/Users/we/Documents/github/react-todo/src/index.js":"1","/Users/we/Documents/github/react-todo/src/App.js":"2","/Users/we/Documents/github/react-todo/src/store/index.js":"3","/Users/we/Documents/github/react-todo/src/store/todo.js":"4","/Users/we/Documents/github/react-todo/src/components/Layout/index.js":"5","/Users/we/Documents/github/react-todo/src/containers/FormGroup/index.js":"6","/Users/we/Documents/github/react-todo/src/containers/TodoList/index.js":"7","/Users/we/Documents/github/react-todo/src/components/SelectBox/index.js":"8","/Users/we/Documents/github/react-todo/src/components/List/index.js":"9","/Users/we/Documents/github/react-todo/src/util/index.js":"10","/Users/we/Documents/github/react-todo/src/containers/ImmutableList/index.js":"11"},{"size":219,"mtime":1611585690933,"results":"12","hashOfConfig":"13"},{"size":1309,"mtime":1611637162665,"results":"14","hashOfConfig":"13"},{"size":139,"mtime":1611588261113,"results":"15","hashOfConfig":"13"},{"size":1668,"mtime":1611641396352,"results":"16","hashOfConfig":"13"},{"size":361,"mtime":1611589206727,"results":"17","hashOfConfig":"13"},{"size":2518,"mtime":1611644001576,"results":"18","hashOfConfig":"13"},{"size":2755,"mtime":1611644120760,"results":"19","hashOfConfig":"13"},{"size":565,"mtime":1611642734043,"results":"20","hashOfConfig":"13"},{"size":631,"mtime":1611636526712,"results":"21","hashOfConfig":"13"},{"size":743,"mtime":1611641984088,"results":"22","hashOfConfig":"13"},{"size":549,"mtime":1611640663770,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1y9dkro",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/we/Documents/github/react-todo/src/index.js",[],["50","51"],"/Users/we/Documents/github/react-todo/src/App.js",[],"/Users/we/Documents/github/react-todo/src/store/index.js",[],"/Users/we/Documents/github/react-todo/src/store/todo.js",[],"/Users/we/Documents/github/react-todo/src/components/Layout/index.js",[],"/Users/we/Documents/github/react-todo/src/containers/FormGroup/index.js",["52"],"import React, { createRef, useMemo, useState } from 'react';\nimport moment from 'moment';\nimport { useDispatch } from 'react-redux';\nimport SelectBox from '../../components/SelectBox';\nimport { addTodo, updateTodo } from '../../store/todo';\nimport { isEmpty } from '../../util';\n\nconst options = [\n  { title: '낮음', value: 'low' },\n  { title: '높음', value: 'high' },\n];\n\nfunction FormGroup({ todo, onClick }) {\n  const inputRefs = useMemo(\n    () =>\n      Array(3)\n        .fill('')\n        .map((i) => createRef()),\n    []\n  );\n  const [priority, setPriority] = useState(todo?.priority || 'low');\n  const dispatch = useDispatch();\n\n  /**\n   * 할일목록 업데이트\n   */\n  const handleClick = () => {\n    // 유효성 검사 체크\n    const [title, content, dueDate] = inputRefs.map((ref) => ref.current.value);\n\n    if (isEmpty(title) || isEmpty(content)) {\n      alert('항목을 입력해주세요');\n      return;\n    }\n\n    const list = { title, content, dueDate, priority };\n\n    (todo && dispatch(updateTodo({ id: todo.id, list }))) ||\n      dispatch(addTodo(list));\n\n    // form 초기화\n    resetForm();\n\n    onClick && onClick();\n  };\n\n  /**\n   * form 영역 초기화\n   */\n  const resetForm = () => {\n    inputRefs.forEach((ref) => (ref.current.value = ''));\n    setPriority('low');\n  };\n\n  /**\n   * 우선순위 조정\n   */\n  const handleSelect = (value) => {\n    setPriority(value);\n  };\n\n  return (\n    <div className=\"form-group\">\n      <div className=\"form-list\">\n        <strong>제목</strong>{' '}\n        <input ref={inputRefs[0]} defaultValue={todo?.title} />\n      </div>\n      <div className=\"form-list\">\n        <strong>기한</strong>\n        <input\n          type=\"date\"\n          min={moment(new Date).format('yyyy-MM-DD')}\n          ref={inputRefs[2]}\n          defaultValue={todo?.dueDate}\n        />\n      </div>\n      <div className=\"form-list\">\n        <strong>우선순위</strong>\n        <SelectBox\n          options={options}\n          onChange={handleSelect}\n          selectedValue={priority}\n          style={{ float: 'right', margin: '-5px 5px' }}\n        />\n      </div>\n      <textarea\n        ref={inputRefs[1]}\n        type=\"text\"\n        className=\"form-control\"\n        placeholder=\"할 일 입력해주세요\"\n        defaultValue={todo?.content}\n      ></textarea>\n      <button\n        className=\"btn btn-secondary m-t-20 float-right\"\n        onClick={handleClick}\n      >\n        완료하기\n      </button>\n    </div>\n  );\n}\nexport default FormGroup;\n","/Users/we/Documents/github/react-todo/src/containers/TodoList/index.js",["53","54"],"import React, { useState } from 'react';\nimport moment from 'moment';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Layout from '../../components/Layout';\nimport List from '../../components/List';\nimport SelectBox from '../../components/SelectBox';\nimport { completedTodo, filtering, removeTodo, todos } from '../../store/todo';\nimport FormGroup from '../FormGroup';\nimport { getFilter, getIndex } from '../../util';\n\nconsole.log(todos);\nconst options = [\n  { title: '우선순위 높은순', value: 'high' },\n  { title: '우선순위 낮은순', value: 'low' },\n];\n\nfunction TodoList() {\n  const data = useSelector(todos);\n  const todoList = getFilter(data, 'todo');\n\n  const [focusId, setId] = useState('');\n  const [formComponent, setComponent] = useState(null);\n  const dispatch = useDispatch();\n\n  const changeSelect = (type) => {\n    dispatch(filtering(type));\n  };\n\n  const handleFocus = (id) => {\n    setId(id);\n  };\n\n  const handleButton = (type) => {\n    if (!focusId) {\n      alert('항목을 선택해주세요');\n      return;\n    }\n\n    const index = getIndex(focusId, data);\n    switch (type) {\n      case 'remove':\n        dispatch(removeTodo(index));\n        break;\n      case 'update':\n        // form영역 붙이기\n        setComponent(<FormGroup todo={data[index]} onClick={removeForm} />);\n        break;\n      case 'complete':\n        dispatch(completedTodo(index));\n        break;\n      default:\n        break;\n    }\n  };\n\n  const removeForm = () => {\n    // 데이터 업데이트\n    setComponent(null);\n  };\n\n  return (\n    <>\n      {/* 정렬 */}\n      <SelectBox options={options} onChange={changeSelect} />\n      {/* <!-- todo list --> */}\n      <div\n        className=\"list-group\"\n        data-element=\"incompletedList\"\n        style={{ marginTop: '70px' }}\n      >\n        {todoList.map((todo, idx) => (\n          <List\n            key={idx}\n            className=\"item-primary\"\n            index={idx}\n            todo={todo}\n            onClick={handleFocus}\n          />\n        ))}\n      </div>\n      {formComponent}\n      {!formComponent && (\n        <div className=\"form-group\">\n          <button\n            className=\"btn btn-danger m-t-20 float-right\"\n            onClick={() => handleButton('remove')}\n          >\n            삭제하기\n          </button>\n          <button\n            className=\"btn btn-primary m-t-20 float-right\"\n            onClick={() => handleButton('update')}\n          >\n            수정하기\n          </button>\n          <button\n            className=\"btn btn-success m-t-20 float-right\"\n            onClick={() => handleButton('complete')}\n          >\n            완료하기\n          </button>\n        </div>\n      )}\n    </>\n  );\n}\nexport default TodoList;\n","/Users/we/Documents/github/react-todo/src/components/SelectBox/index.js",[],"/Users/we/Documents/github/react-todo/src/components/List/index.js",["55"],"import React from 'react';\n\nfunction List({ className, todo, onClick }) {\n  const handleClick = (e) => {\n    e.preventDefault();\n    onClick && onClick(todo.id);\n  };\n\n  return (\n    <a\n      href=\"#\"\n      className={`list-group-item list-group-${className} list-group-item-action`}\n      onClick={handleClick}\n    >\n      <div className=\"d-flex w-100 justify-content-between\">\n        <h5 className=\"mb-1\">[{todo.title}]</h5>\n        <h5 className=\"mb-1\">{todo.content}</h5>\n        <small>{todo.dueDate}</small>\n        <small>{todo.priority === 'high' ? '↑' : '↓'}</small>\n      </div>\n    </a>\n  );\n}\nexport default List;\n","/Users/we/Documents/github/react-todo/src/util/index.js",[],"/Users/we/Documents/github/react-todo/src/containers/ImmutableList/index.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":72,"column":23,"nodeType":"62","messageId":"63","endLine":72,"endColumn":31,"fix":"64"},{"ruleId":"65","severity":1,"message":"66","line":2,"column":8,"nodeType":"67","messageId":"68","endLine":2,"endColumn":14},{"ruleId":"65","severity":1,"message":"69","line":4,"column":8,"nodeType":"67","messageId":"68","endLine":4,"endColumn":14},{"ruleId":"70","severity":1,"message":"71","line":10,"column":5,"nodeType":"72","endLine":14,"endColumn":6},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"75","text":"76"},"no-unused-vars","'moment' is defined but never used.","Identifier","unusedVar","'Layout' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",[1650,1650],"()"]